

# This is a complete configuration to deploy Loki backed by the filesystem.
# The index will be shipped to the storage via tsdb-shipper.

deploymentMode: SingleBinary

# Enable single binary deployment mode
singleBinary:
  replicas: 1

# Make sure that loki is deployed to the monitoring node 
  nodeSelector:
    workload: monitoring

  tolerations:
    - key: "workload"
      operator: "Equal"
      value: "monitoring"
      effect: "NoSchedule"

# Make sure persistence is turned off (or configure if needed)
  persistence:
    enabled: false

# Make sure there are ephemaral volume mounts for things like alert rules and ect. 
  extraVolumes:
    - name: loki-chunks
      emptyDir: {}
    - name: loki-rules
      configMap:
        name: loki-alert-rules
    - name: loki-compactor
      emptyDir: {}

# this these are all of the mounts that need to be put up cuz loki need them to run I don't want 
# to nest my mounts so i'm making each one manually until loki works 
    - name: loki-tsdb-cache
      emptyDir: {}
    - name: loki-tsdb-active
      emptyDir: {}

  extraVolumeMounts:
    - name: loki-chunks
      mountPath: /tmp/loki/chunks
    - name: loki-rules
      mountPath: /tmp/loki/rules/fake
      readOnly: true
    - name: loki-compactor
      mountPath: /tmp/loki/compactor

# this these are all of the mounts that need to be put up cuz loki need them to run I don't want 
# to nest my mounts so i'm making each one manually until loki works 
    - name: loki-tsdb-cache
      mountPath: /tmp/loki/tsdb-shipper-cache
    - name: loki-tsdb-active
      mountPath: /tmp/loki/tsdb-shipper-active

  # extraConfigMounts: 
  #   - name: loki-rules
  #     mountPath: /tmp/loki/rules
  #     readOnly: true

# Shut down all microservices so that the monolithic architecture can be used instead 
read:
  replicas: 0
write:
  replicas: 0
backend:
  replicas: 0
distributor:
  replicas: 0
ingester:
  replicas: 0
querier:
  replicas: 0
queryFrontend:
  replicas: 0
queryScheduler:
  replicas: 0
compactor:
  replicas: 0
indexGateway:
  replicas: 0
bloomCompactor:
  replicas: 0
bloomGateway:
  replicas: 0

loki:
  auth_enabled: false

  server:
    http_listen_port: 3100

  commonConfig:
    ring:
      instance_addr: 127.0.0.1
      kvstore:
        store: inmemory
    replication_factor: 1
    path_prefix: /tmp/loki

  schemaConfig:
    configs:
      - from: 2024-01-01
        store: tsdb
        object_store: filesystem
        schema: v13
        index:
          prefix: index_
          period: 24h

  storage:
    type: filesystem

  # rulerConfig:
  #   enabled: false

  storage_config:
    filesystem:
      directory: /tmp/loki/chunks

  compactor:
    working_directory: /tmp/loki/compactor

  rulerConfig:
    enable_api: true
    storage:
      type: local
      local:
        directory: /tmp/loki/rules
    rule_path: "/tmp/loki/rules"
    ring:
        kvstore:
          store: inmemory
    enable_alertmanager_v2: true
    alertmanager_url: http://kube-prometheus-stack-alertmanager.monitoring:9093

  # read: 
  #   extraVolumeMounts:
  #     - name: rules
  #       mountPath: "/tmp/loki/rules/fake"
  #   extraVolumes:
  #     - name: rules
  #       configMap:
  #         name: loki-alert-rules

# ruler:
#   enabled: true
#   nodeSelector:
#     workload: monitoring
#   tolerations:
#     - key: "workload"
#       operator: "Equal"
#       value: "monitoring"
#       effect: "NoSchedule"

#   extraVolumes:
#     - name: loki-rules
#       configMap:
#         name: loki-rule-config

#   extraVolumeMounts:
#     - name: loki-rules
#       mountPath: /tmp/loki/rules
#       readOnly: true

#   extraConfigMounts: 
#     - name: loki-rules
#       mountPath: /tmp/loki/rules
#       readOnly: true


monitoring:
  alerts:
    enabled: true
    labels:
      release: kube-prometheus-stack
  dashboards:
    enabled: true
    labels:
      release: kube-prometheus-stack
  rules:
    enabled: true
    labels:
      release: kube-prometheus-stack
  selfMonitoring:
    enabled: false
  serviceMonitor:
    enabled: true
    interval: 1m
    labels:
      release: kube-prometheus-stack
    scrapeTimeout: 10s